Edvina AB
Olle E. Johansson

Project start: 2013-04-18
Update:        201l-08-20








SRV Support in the SIP channel of Asterisk
==========================================

The Asterisk SIP channel lacks full support of RFC 3263, Locating SIP services. This project
aims at fixing that.

For every transaction, a SIP client needs to build a list of SIP servers as discovered
by DNS lookup. The list needs to be prioritized and handled according to a set of
rules set by RFC 3263 and the RFCs referred to by that document.

- DNS Load balancing
  For servers in the same priority, select one based on the weight distribution indicated
  in the records
- DNS priority and failover
  Start with lowest priority and work upwards in the set of records.

In addition, address family needs to be handled properly. An IPv4 server needs to ignore
hosts with only IPv6 records and move on in the process of selecting a server and 
vice versa for IPv6 only hosts. 

This project is funded by Inteno Broadband Solutions AB, Sweden. http://www.intenogroup.com

Happy Earballs
==============
Dual stack hosts needs to contact both address families at the same time to minimize 
timeout effects on caller's call setup time.

This is not in scope for this project. Work is in progress in the SIP Forum IPv6 wg
to define a process for this situation.

Asterisk changes (brainstorm suggestion)
========================================

- Make sure that the SIP channel gets a list on a SRV lookup, not a single host.
	- Done
- Add failover based on that list
	- Partly done, needs testing
- Make sure the list is searched on every transaction and have failover in a call
- Add peer matching (see below)
- Add TTL handling


Peer matching
-------------
This is a bit more interesting. If you connect to a service provider and add
this to sip.conf

register=user:password@serviceprovider/1234


[serviceprovider]
type=peer
host=serviceproviderdomain.tld
context=bazinga

You expect to be able to receive calls from the service provider
using that peer. The service provider has a list of servers using IPv4
and IPv6 in the SRV records for that name. Should the Asterisk SIP channel
match the full list? I think it should.

Currently Asterisk will resolve to one IP address and use that for matching
of incoming calls, possibly deny calls from servers that does not match.
This is NOT the expected solution.

Solution to peer matching for inbound calls
--------------------------------------------
We are going to add "shadow peers" that has a special flag that forces
the code, after matching, to use the "main peer". This is to get call limits
and other functions to work properly. These peers will be created every
time we do an SRV lookup and deleted and recreated when a new SRV lookup is happening
for a peer (after TTL expired). They will only be used for matching on
inbound calls and should not be used for outbound calls in the dialplan.
They get random names.

The "main" peer needs to have the active IP used for calls and registrations.
There will therefore be a shadow peer with the same IP. At failover
the working peer's IP/port is moved to the main peer.

The peer will have these as a chain of "subpeers" to make sure they are 
deleted when a peer is deleted.

How this works in combination with realtime is still to be explored.

Failover on outbound requests
=============================
I see two situations for failover to the next host/ip in the SRV list:
- sip_xmit fails (no destination, icmp unreachable etc)
- timeout on Timer B

The Timeout case is handled by the retransmit engine. We need to
restart the timers and retransmissions with the same request.

The SIP_xmit can be handled in send_request(). This function doesn't
bother with failures at this time, strangely enough. What fails, fails,
and currently there's nothing to do about it.

We do need a function in main/srv.c to switch to the next entry and
move the "current" pointer.

Registrations
=============
First time registration selects a working server. If no response
or a 5xx response, move to next server. (what to do with 3xx?)
Stay with that server until it fails, which means re-registrations
will stay on the same server. If server fails, restart with full
SRV list and try from the top until a working server is found.

Realtime out of scope
=====================
For this project, realtime is out of scope. Peer match by IP
based on SRV will not work in realtime. Sorry. Just not doable.
You will have to create records for each SRV host and maintain them.
Realtime is not built for this. Do NOT use it for outbound SIP 
trunks.

Development Notes
=================

The SIP channel will have to be in control and get the full list of SRV
records. We can't hide this list.

DNSmanager can still maintain A/AAAA records if enabled, but not SRV
lists.

SRV records usage
=================
- When Outbound proxy is used and can't be reached for initial transaction,
  fail over to next ob proxy in srv record set (dialog SRV should be set up
  from outbound proxy name)
- When Peer is used DNS SRV name should be taken from peer
- Otherwise dialstring

The dialog should always look up a new DNS SRV set from DNS, not copy from
peer.


Only do failover for initial transactions, not within-dialog transactions,
unless entries in the route set has a DNS name and not an IP address.

Register before call
====================
In IMS you need to be registred before a call. For this
- We need to set a flag on the dialog for the registration that the peer needs an update
- When a registration state changes we need a flag on the peer to set registration status.
- The main peer's IP need to be the one we register with. At failover for registration,
  this needs to be handled.

Not fixed here
==============
At IETF 87 in Berlin I had a meeting with two members of the IETF DNS directorate
to discuss SRV records. We discovered that SRV requires you to test ALL ip addresses
found (in families you support) for a host before moving to the next host. 
This means that if a host has multiple A or AAAA records, all of them should be
tested. This is not supported in Asterisk currently and this patch will not
fix that.


Todo:
=====
1. Expose SRV records to the SIP channel. Remove when response is received (1xx or higher).
	- The API is changed to support a module accessing SRV records.
	- Done.
2. Make sure SIP channel selects right with IPv4/IPv6. 
	- Done for [peers] in the sip.conf file.
	- Not done for calling a DNS name in the dial string (some code is there though)
3. Provide hooks for happy earballs if server is dual stack and we're dual stack
	- Postponed, not part of this project
4. Implement failover to next server in list if transaction fails.
	- Started
5. Make sure we use the DNS TTL properly
	- Needs further work
6. Use SRV for outbound proxys too, with failover
	- Needs check
7. Add multiple peers (shadowpeers), one for each SRv entry/IP address
	- delete existing ones if needed
	- Done.
8. Make sure the shadow peers are deleted when masterpeer is deleted
	- Done
9. Make sure that shadow peers are listed in "sip show peers"
	- Done
10. List shadow peers in "sip show peer <master>"
	- Done
11. Add a configuration option to enable shadow peer functionality
12. Make sure the Contact ACL list is updated by DNS manager
13. Test registrations so they fail over properly
	- Not implemented
14. Tie calling to registred host (IMS Fix)
	- Flag implemented, code missing
15. Make sure that calling a peer where the primary host is UNREACHABLE in qualify fails over
16. Avoid testing. Real developers don't test.
15. Don't open a bug tracker issue on this project.
16. De-install GDB. GDB is for weak developers.
17. Do not write any documentation, regardless of what people say. It's a SEP.
18. Stay calm and carry on.

Random notes:
-------------
- If record-route is a name - use SRV lookup on it and keep that set for the dialog
- Record-route overrides primary SRV set - should we remove primary set for dialog?
  - When do we remove SRV set - when we get response over 100 and !5xx ?
- Check send_request() - some work started there
- proxy_update()
- 
