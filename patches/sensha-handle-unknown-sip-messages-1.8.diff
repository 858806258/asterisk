Index: channels/chan_sip.c
===================================================================
--- channels/chan_sip.c	(.../branches/1.8)	(revision 430758)
+++ channels/chan_sip.c	(.../team/oej/sensha-handle-unknown-sip-messages-1.8)	(revision 430758)
@@ -8419,12 +8419,24 @@
 		/* All messages must always have From: tag */
 		if (ast_strlen_zero(fromtag)) {
 			ast_debug(5, "%s request has no from tag, dropping callid: %s from: %s\n", sip_methods[req->method].text , callid, from );
+			/* Try to respond nevertheless */
+			transmit_response_using_temp(callid, addr, 1, intended_method,
+						     req, "400 Bad Request");
 			return NULL;
 		}
 		/* reject requests that must always have a To: tag */
-		if (ast_strlen_zero(totag) && (req->method == SIP_ACK || req->method == SIP_BYE || req->method == SIP_INFO )) {
-			ast_debug(5, "%s must have a to tag. dropping callid: %s from: %s\n", sip_methods[req->method].text , callid, from );
-			return NULL;
+		if (ast_strlen_zero(totag)) {
+ 			if  (req->method == SIP_ACK) {
+				ast_debug(5, "%s must have a to tag. dropping callid: %s from: %s\n", sip_methods[req->method].text , callid, from );
+				return NULL;
+			}
+			if (req->method == SIP_BYE || req->method == SIP_INFO ) {
+				/* We have to respond */
+				ast_debug(5, "%s must have a to tag. dropping callid: %s from: %s\n", sip_methods[req->method].text , callid, from );
+				transmit_response_using_temp(callid, addr, 1, intended_method,
+						     req, "400 Bad Request");
+				return NULL;
+			}
 		}
 	}
 
@@ -8502,6 +8514,7 @@
 		free_via(via);
 	} /* end of pedantic mode Request/Reponse to Dialog matching */
 
+
 	/* See if the method is capable of creating a dialog */
 	if (sip_methods[intended_method].can_create == CAN_CREATE_DIALOG) {
 		struct sip_pvt *p = NULL;

