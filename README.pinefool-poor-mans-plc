Edvina AB
Olle E. Johansson











Poor Man's PLC
==============
We see a lot of issues in the RTP streams when bridging two sip calls in Asterisk. If there's 
packet loss coming in, it's the same going out - but in this case the sequence numbers doesn't 
indicate packet loss. This causes issues with recordings sounding bad and possibly other issues 
since we have quite long phone calls. If the packets coming in are reordered, they go out
the same - but this time resequenced to hide the reordering. This can be very bad for some 
codecs

Investigating the PLC in Asterisk, according to Malcolm's wiki article there has to be a core 
bridge with transcoding and a jitter buffer. That won't work for us.

Looking into the RTP channel, where I've spent some time recently, I notice that Asterisk does not bother 
checking that packets are sequential, so the RTP channel ignores both packet loss and reordering.
That needed to change.

I created a very simple PLC in the RTP channel for the incoming stream, following these principles:

PLC mode (configured in sip.conf)
==================================
- If there is packet loss, resend the previous packet. We discover this at the next packet, so we 
  introduce two frames at once. In most cases with small packet loss, the receiving end will sort this 
  out in the jitter buffer. 
- If there is packet reordering, a jitter causing a packet to arrive too late, we ignore that packet 
  since we've already replaced it with another one.

Shit-in-shit-out mode (configured in rtp.conf)
==============================================
- If there is packet loss, transmit RTP with gaps in sequence numbers to indicate reordering
- If packets are reordered, transmit reordered

(turn this on with donthidepacketloss=yes in rtp.conf)

Normally PLC would work hand-in-hand with a jitter buffer so we first reorder incoming RTP packets, then add the 
missing ones. In this case, I can't afford introducing extra delay caused by a jitter buffer, so I needed a poor 
man's implementation. It will add a bit of CPU, copying frames that wasn't done previously, but it is not a 
massive amount of operations - unless you have a really poor connection. In that case, audio will be lost 
anyway and there's nothing much we can do to save the situation.

How does it work?
================
PLC mode:
- If we receive packets 2,3,5 - we will send 2,3,3,5 into the bridge, making sure that we get no skew.
- If we receive 2,3,5,4 we will send 2,3,3,5 and throw away #4.

SISO mode:
- If we receive packets 2,3,5 we will send 2,3,5
- If we receive packets 1,3,2,4,5 we will send them as 1,3,2,4,5

Before this patch:
- If we receive packets 1,2,3,5 we will send them as 1,2,3,4
- If we receive packets 1,3,2,4,5 we will send them as 1,2,3,4,5 - just new numbers,
  the media is still not in order.

Looking at wireshark on the other side of the call, the outbound stream now looks better. Of course, 
there's jitter but no packet loss in the stream, we still have all expected frames - for Alaw 50 RTP 
frames per second. Without this PLC we could get 45 and the playback of a recording would 
sound "fast" - Donald Duckish... :-)

It is a small hack compared with other RTP hacks I've worked with recently- the DTMF length, 
Comfort Noise and others. But it does make the audio better in case of bad incoming streams.

Configuration
=============
PLC: You can either enable it globally or per device in sip.conf. The SIP channel only
use this for audio streams.

SISO: Enable "donthidepacketloss" in rtp.conf.

Downside
========
This is a poor man's fix. Codecs that have built-in PLC, like G.729, can propably handle it
internally better. In that case the "donthidepacketloss" patch works better.

At some point the PLC should automatically be disabled for a set of codecs. If you want
to fund that work, contact me directly.

Credits
=======
A bit thank you to Martin Festr Vit (voipmonitor.org) who has spent a lot of time
chatting with me about possible solutions - the donthidepacketloss mode is based
on his ideas mostly.

Reading suggestion (with audio)
===============================
If you want to learn more about PLC there are soem very good documents,
many of them with audio examples. Read it and give me new ideas on how to
solve these issues!
- http://www.voiptroubleshooter.com/problems/plc.html
- http://en.wikipedia.org/wiki/Packet_loss_concealment
- http://research.microsoft.com/pubs/73282/network-survey-1998.pdf
- http://ivms.stanford.edu/~liang/research/sigproc2/
- http://www.ietf.org/rfc/rfc3550.txt - The RTP RFC

And finally a description of the current PLC in Asterisk
- https://wiki.asterisk.org/wiki/display/AST/Packet+Loss+Concealment+%28PLC%29

