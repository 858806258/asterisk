Edvina AB
Olle E. Johansson

Project start: Feb 1, 2015
Latest update: March 23, 2015








Chocolate - support and generate AVPF feedback in RTCP
=======================================================
If we observe bad reports in RTCP we need to tell the sender of VP8 video
that we are observing issues and that it needs to adjust properties of the
video in order to try to fix these issues. This is done in RTCP Feedback
messages, which are enabled by SDP negotiation.

Tasks
-----
* Implement infrastructure
  - Parse feedback message in RTCP
  - ENUMs for feedback messages
	- Done
* Add SDP parameters for rtcp-fb
	- Done
* Add sip.conf options for rtcp-fb enabling
	- Done
* Add test command (CLI or something) to force sending backoff
* Add bitrate estimator 
	- See notes below. What's the best way?
* Send feedback based on RTCP
* Forward incoming feedback across bridge and send out on other side
  for optimal video pass through

Questions
---------
* How do we handle video offers with different settings per codec?

Settings
--------
- Default and per device setting (depending on video enabled)
  googleremb=offeranswer | no |answeronly
	offeranswer = Offer this in outbound calls and use it if offered in our answer
	answeronly = Don't offer this, but enable if offered
	no	= don't bother (default)

References
------------
* RTP/AVPF - RFC 4585 
	https://tools.ietf.org/html/rfc4585
* RTCP message for Receiver Estimated Maximum Bitrate
	https://tools.ietf.org/html/draft-alvestrand-rmcat-remb-03
* A Google congestion control algorithm for real-time communication
	https://tools.ietf.org/html/draft-alvestrand-rmcat-congestion-02
* RTP - RFC 3550
	https://tools.ietf.org/html/rfc3550

SDP example:
------------
Chrome:

	a=rtpmap:100 VP8/90000
	a=rtcp-fb:100 ccm fir
	a=rtcp-fb:100 nack
	a=rtcp-fb:100 nack pli
	a=rtcp-fb:100 goog-remb

Mozilla nightly:

	a=rtcp-fb:120 nack
	a=rtcp-fb:120 nack pli
	a=rtcp-fb:120 ccm fir

No "goog-remb" support

Jitsi meet supports goog-remb

Definitions from RFC 5104
=========================
Total media bit rate:
          The total bits per second transferred in a media stream,
          measured at an observer-selected protocol layer and averaged
          over a reasonable timescale, the length of which depends on
          the application.  In general, a media sender and a media
          receiver will observe different total media bit rates for the
          same stream, first because they may have selected different
          reference protocol layers, and second, because of changes in
          per-packet overhead along the transmission path.  The goal
          with bit rate averaging is to be able to ignore any burstiness
          on very short timescales (e.g., below 100 ms) introduced by
          scheduling or link layer packetization effects.

   Maximum total media bit rate:
          The upper limit on total media bit rate for a given media
          stream at a particular receiver and for its selected protocol
          layer.  Note that this value cannot be measured on the
          received media stream.  Instead, it needs to be calculated or
          determined through other means, such as quality of service
          (QoS) negotiations or local resource limitations.  Also note
          that this value is an average (on a timescale that is
          reasonable for the application) and that it may be different
          from the instantaneous bit rate seen by packets in the media
          stream.

